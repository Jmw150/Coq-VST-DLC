DIGEST a3fd4417330929e2e6a01cfcef388fec
FVC.Verif_sumarray
R4780:4789 VC.Preface <> <> lib
R5122:5140 VST.floyd.proofauto <> <> lib
R5158:5168 VC.sumarray <> <> lib
inst 5180:5188 <> CompSpecs
R5192:5200 VST.veric.mpred <> compspecs class
R5218:5221 VC.sumarray <> prog def
def 5244:5248 <> Vprog
R5252:5259 VST.veric.mpred <> varspecs def
R5275:5278 VC.sumarray <> prog def
def 5903:5907 <> sum_Z
R5917:5920 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5921:5921 Coq.Numbers.BinNums <> Z ind
R5911:5914 Coq.Init.Datatypes <> list ind
R5916:5916 Coq.Numbers.BinNums <> Z ind
R5926:5935 Coq.Lists.List <> fold_right def
R5937:5941 Coq.ZArith.BinInt Z add def
prf 6069:6077 <> sum_Z_app
binder 6089:6089 <> a:1
binder 6091:6091 <> b:2
R6106:6109 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6094:6098 VC.Verif_sumarray <> sum_Z def
R6102:6103 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R6101:6101 VC.Verif_sumarray <> a:1 var
R6104:6104 VC.Verif_sumarray <> b:2 var
R6117:6119 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R6110:6114 VC.Verif_sumarray <> sum_Z def
R6116:6116 VC.Verif_sumarray <> a:1 var
R6120:6124 VC.Verif_sumarray <> sum_Z def
R6126:6126 VC.Verif_sumarray <> b:2 var
def 7195:7207 <> sumarray_spec
R7216:7218 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R7211:7215 compcert.common.AST <> ident def
R7219:7225 VST.veric.mpred <> funspec ind
R7230:7237 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7247:7248 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R7238:7246 VC.sumarray <> _sumarray def
R7249:7253 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7255:7256 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7260:7261 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7264:7266 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7272:7273 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7282:7284 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7291:7292 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7297:7298 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7300:7307 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7318:7319 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7324:7328 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7560:7568 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7574:7578 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_','_x_':'_x_','_x_':'_x_','_x_':'_x_'PRE'_'['_x_','_'..'_','_x_']'_x_'POST'_'['_x_']'_x not
R7308:7311 compcert.exportclight.Clightdefs <> tptr def
R7313:7317 compcert.exportclight.Clightdefs <> tuint def
R7320:7323 compcert.exportclight.Clightdefs <> tint def
R7569:7573 compcert.exportclight.Clightdefs <> tuint def
R7257:7259 compcert.common.Values <> val ind
R7267:7271 VST.msl.shares <> share def
R7285:7288 Coq.Init.Datatypes <> list ind
R7290:7290 Coq.Numbers.BinNums <> Z ind
R7299:7299 Coq.Numbers.BinNums <> Z ind
binder 7254:7254 <> a:3
binder 7262:7263 <> sh:4
binder 7274:7281 <> contents:5
binder 7293:7296 <> size:6
R7329:7335 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7353:7354 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7382:7392 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7446:7449 VST.floyd.canon <> ::assert:'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R7336:7349 VST.veric.shares <> readable_share def
R7351:7352 VC.Verif_sumarray <> sh:4 var
R7356:7359 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7364:7367 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7360:7363 VC.Verif_sumarray <> size:6 var
R7360:7363 VC.Verif_sumarray <> size:6 var
R7368:7381 compcert.lib.Integers Int max_signed def
R7393:7398 Coq.Lists.List <> Forall ind
R7438:7445 VC.Verif_sumarray <> contents:5 var
binder 7405:7405 <> x:7
R7411:7414 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7416:7419 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R7415:7415 VC.Verif_sumarray <> x:7 var
R7415:7415 VC.Verif_sumarray <> x:7 var
R7420:7435 compcert.lib.Integers Int max_unsigned def
R7450:7457 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7459:7460 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7481:7484 VST.floyd.canon <> ::assert3:'PARAMS'_'('_x_';'_'..'_';'_x_')'_x not
R7458:7458 VC.Verif_sumarray <> a:3 var
R7461:7464 compcert.common.Values <> Vint constr
R7467:7474 compcert.lib.Integers Int repr def
R7476:7479 VC.Verif_sumarray <> size:6 var
R7485:7491 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7559:7559 VST.floyd.canon <> ::assert4:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7492:7498 VST.floyd.field_at <> data_at def
R7558:7558 VC.Verif_sumarray <> a:3 var
R7524:7526 Coq.Lists.List <> map def
R7534:7536 Coq.Lists.List <> map def
R7547:7554 VC.Verif_sumarray <> contents:5 var
R7538:7545 compcert.lib.Integers Int repr def
R7528:7531 compcert.common.Values <> Vint constr
R7504:7509 compcert.exportclight.Clightdefs <> tarray def
R7517:7520 VC.Verif_sumarray <> size:6 var
R7511:7515 compcert.exportclight.Clightdefs <> tuint def
R7500:7501 VC.Verif_sumarray <> sh:4 var
binder 7254:7254 <> a:8
binder 7262:7263 <> sh:9
binder 7274:7281 <> contents:10
binder 7293:7296 <> size:11
R7579:7586 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R7587:7594 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7627:7630 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R7595:7598 compcert.common.Values <> Vint constr
R7601:7608 compcert.lib.Integers Int repr def
R7611:7615 VC.Verif_sumarray <> sum_Z def
R7617:7624 VC.Verif_sumarray <> contents:10 var
R7631:7635 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7703:7703 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R7636:7642 VST.floyd.field_at <> data_at def
R7702:7702 VC.Verif_sumarray <> a:8 var
R7668:7670 Coq.Lists.List <> map def
R7678:7680 Coq.Lists.List <> map def
R7691:7698 VC.Verif_sumarray <> contents:10 var
R7682:7689 compcert.lib.Integers Int repr def
R7672:7675 compcert.common.Values <> Vint constr
R7648:7653 compcert.exportclight.Clightdefs <> tarray def
R7661:7664 VC.Verif_sumarray <> size:11 var
R7655:7659 compcert.exportclight.Clightdefs <> tuint def
R7644:7645 VC.Verif_sumarray <> sh:9 var
R9864:9866 compcert.common.Values <> val ind
def 11880:11888 <> main_spec
R11894:11901 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R11907:11909 VST.floyd.client_lemmas <> :::'DECLARE'_x_x not
R11902:11906 VC.sumarray <> _main def
R11910:11914 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11917:11919 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11927:11937 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11957:11966 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11971:11980 VST.floyd.client_lemmas <> ::funspec_scope:'WITH'_x_':'_x_'PRE'_'['_']'_x_'POST'_'['_x_']'_x not
R11967:11970 compcert.exportclight.Clightdefs <> tint def
R11920:11926 VST.veric.SeparationLogic <> globals def
binder 11915:11916 <> gv:12
R11938:11945 VST.veric.SeparationLogic <> main_pre def
R11955:11956 VC.Verif_sumarray <> gv:12 var
R11952:11953 Coq.Init.Datatypes <> tt constr
R11947:11950 VC.sumarray <> prog def
binder 11915:11916 <> gv:13
R11981:11993 VST.floyd.canon <> ::assert:'PROP'_'()'_x not
R11994:12001 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R12027:12033 VST.floyd.canon <> ::assert3:'RETURN'_'('_x_')'_x not
R12002:12005 compcert.common.Values <> Vint constr
R12008:12015 compcert.lib.Integers Int repr def
R12023:12023 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12021:12021 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12019:12019 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R12034:12037 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R12040:12040 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R12038:12039 VST.msl.seplog <> TT meth
def 13907:13911 <> Gprog
R13916:13916 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13930:13931 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13941:13941 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R13917:13929 VC.Verif_sumarray <> sumarray_spec def
R13932:13940 VC.Verif_sumarray <> main_spec def
R14289:14293 VC.Verif_sumarray <> Vprog def
R14350:14357 VST.veric.mpred <> varspecs def
prf 14764:14776 <> body_sumarray
R14779:14788 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R14813:14825 VC.Verif_sumarray <> sumarray_spec def
R14802:14811 VC.sumarray <> f_sumarray def
R14796:14800 VC.Verif_sumarray <> Gprog def
R14790:14794 VC.Verif_sumarray <> Vprog def
R18300:18307 compcert.lib.Integers Int repr def
R18371:18374 compcert.common.Values <> Vint constr
R18377:18384 compcert.lib.Integers Int repr def
R18442:18445 VST.floyd.canon <> temp constr
R18451:18454 compcert.common.Values <> Vint constr
R18457:18464 compcert.lib.Integers Int repr def
R18447:18448 VC.sumarray <> _i def
R18936:18945 VST.floyd.client_lemmas <> abbreviate def
R18988:18997 VST.floyd.client_lemmas <> abbreviate def
R19256:19265 VST.floyd.client_lemmas <> abbreviate def
R19337:19346 VST.floyd.client_lemmas <> abbreviate def
R19411:19420 VST.floyd.client_lemmas <> abbreviate def
R20737:20739 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20744:20748 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20743:20743 Coq.Numbers.BinNums <> Z ind
binder 20740:20740 <> i:14
R20749:20755 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20770:20774 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20757:20760 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20762:20765 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20761:20761 VC.Verif_sumarray <> i:14 var
R20761:20761 VC.Verif_sumarray <> i:14 var
R20775:20781 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20791:20802 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20830:20841 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20872:20883 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20940:20944 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20782:20785 VST.floyd.canon <> temp constr
R20787:20788 VC.sumarray <> _a def
R20803:20806 VST.floyd.canon <> temp constr
R20812:20815 compcert.common.Values <> Vint constr
R20818:20825 compcert.lib.Integers Int repr def
R20827:20827 VC.Verif_sumarray <> i:14 var
R20808:20809 VC.sumarray <> _i def
R20842:20845 VST.floyd.canon <> temp constr
R20851:20854 compcert.common.Values <> Vint constr
R20857:20864 compcert.lib.Integers Int repr def
R20847:20848 VC.sumarray <> _n def
R20884:20887 VST.floyd.canon <> temp constr
R20893:20896 compcert.common.Values <> Vint constr
R20899:20906 compcert.lib.Integers Int repr def
R20909:20913 VC.Verif_sumarray <> sum_Z def
R20916:20922 VST.floyd.sublist <> sublist def
R20926:20926 VC.Verif_sumarray <> i:14 var
R20889:20890 VC.sumarray <> _s def
R20945:20951 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R21019:21019 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20952:20958 VST.floyd.field_at <> data_at def
R20984:20986 Coq.Lists.List <> map def
R20994:20996 Coq.Lists.List <> map def
R20998:21005 compcert.lib.Integers Int repr def
R20988:20991 compcert.common.Values <> Vint constr
R20964:20969 compcert.exportclight.Clightdefs <> tarray def
R20971:20975 compcert.exportclight.Clightdefs <> tuint def
R20737:20739 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20744:20748 VST.msl.seplog <> ::logic:'EX'_x_'..'_x_','_x not
R20743:20743 Coq.Numbers.BinNums <> Z ind
binder 20740:20740 <> i:15
R20749:20755 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20770:20774 VST.floyd.canon <> :::'PROP'_'('_x_';'_'..'_';'_x_')'_x not
R20757:20760 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20762:20765 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x_'<='_x not
R20761:20761 VC.Verif_sumarray <> i:15 var
R20761:20761 VC.Verif_sumarray <> i:15 var
R20775:20781 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20791:20802 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20830:20841 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20872:20883 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20940:20944 VST.floyd.canon <> ::assert3:'LOCAL'_'('_x_';'_'..'_';'_x_')'_x not
R20782:20785 VST.floyd.canon <> temp constr
R20787:20788 VC.sumarray <> _a def
R20803:20806 VST.floyd.canon <> temp constr
R20812:20815 compcert.common.Values <> Vint constr
R20818:20825 compcert.lib.Integers Int repr def
R20827:20827 VC.Verif_sumarray <> i:15 var
R20808:20809 VC.sumarray <> _i def
R20842:20845 VST.floyd.canon <> temp constr
R20851:20854 compcert.common.Values <> Vint constr
R20857:20864 compcert.lib.Integers Int repr def
R20847:20848 VC.sumarray <> _n def
R20884:20887 VST.floyd.canon <> temp constr
R20893:20896 compcert.common.Values <> Vint constr
R20899:20906 compcert.lib.Integers Int repr def
R20909:20913 VC.Verif_sumarray <> sum_Z def
R20916:20922 VST.floyd.sublist <> sublist def
R20926:20926 VC.Verif_sumarray <> i:15 var
R20889:20890 VC.sumarray <> _s def
R20945:20951 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R21019:21019 VST.floyd.canon <> ::assert5:'SEP'_'('_x_';'_'..'_';'_x_')' not
R20952:20958 VST.floyd.field_at <> data_at def
R20984:20986 Coq.Lists.List <> map def
R20994:20996 Coq.Lists.List <> map def
R20998:21005 compcert.lib.Integers Int repr def
R20988:20991 compcert.common.Values <> Vint constr
R20964:20969 compcert.exportclight.Clightdefs <> tarray def
R20971:20975 compcert.exportclight.Clightdefs <> tuint def
def 22299:22356 <> Unnamed_thm
R22316:22317 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22318:22318 Coq.Numbers.BinNums <> Z ind
R22315:22315 Coq.Numbers.BinNums <> Z ind
binder 22312:22312 <> f:16
R22325:22325 Coq.Numbers.BinNums <> Z ind
binder 22322:22322 <> x:17
R22335:22338 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22339:22345 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R22349:22350 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R22348:22348 Coq.Numbers.BinNums <> Z ind
binder 22346:22346 <> i:18
R22355:22355 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22351:22351 VC.Verif_sumarray <> f:16 var
R22353:22353 VC.Verif_sumarray <> x:17 var
R22356:22356 VC.Verif_sumarray <> i:18 var
R22333:22333 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22329:22329 VC.Verif_sumarray <> f:16 var
R22331:22331 VC.Verif_sumarray <> x:17 var
R25722:25724 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25706:25712 Coq.ZArith.Zcomplements <> Zlength def
R25722:25724 Coq.Init.Logic <> ::type_scope:x_'='_x not
R25706:25712 Coq.ZArith.Zcomplements <> Zlength def
R26854:26864 VST.floyd.sublist <> Zlength_map thm
R26854:26864 VST.floyd.sublist <> Zlength_map thm
R26854:26864 VST.floyd.sublist <> Zlength_map thm
R26854:26864 VST.floyd.sublist <> Zlength_map thm
R26854:26864 VST.floyd.sublist <> Zlength_map thm
R27404:27404 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27404:27404 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27896:27908 VST.floyd.sublist <> sublist_split thm
R27916:27916 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27896:27908 VST.floyd.sublist <> sublist_split thm
R27916:27916 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27896:27908 VST.floyd.sublist <> sublist_split thm
R27916:27916 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R27938:27946 VC.Verif_sumarray <> sum_Z_app thm
R27938:27946 VC.Verif_sumarray <> sum_Z_app thm
R27938:27946 VC.Verif_sumarray <> sum_Z_app thm
R27958:27968 VST.floyd.sublist <> sublist_one thm
R27958:27968 VST.floyd.sublist <> sublist_one thm
R27958:27968 VST.floyd.sublist <> sublist_one thm
def 28892:28904 <> four_contents
R28909:28909 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28911:28912 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28914:28915 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28917:28918 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R28920:28920 Coq.Lists.List ListNotations ::list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
prf 28930:28938 <> body_main
R28942:28951 VST.floyd.SeparationLogicAsLogicSoundness MainTheorem.CSHL_PracticalLogic.CSHL_MinimumLogic.CSHL_Defs semax_body def
R28972:28980 VC.Verif_sumarray <> main_spec def
R28965:28970 VC.sumarray <> f_main def
R28959:28963 VC.Verif_sumarray <> Gprog def
R28953:28957 VC.Verif_sumarray <> Vprog def
R30427:30427 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30436:30437 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30441:30442 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30456:30457 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30459:30459 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30431:30435 VC.sumarray <> _four def
R30438:30440 VST.veric.shares <> Ews def
R30443:30455 VC.Verif_sumarray <> four_contents def
R30427:30427 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30436:30437 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30441:30442 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30456:30457 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30459:30459 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30431:30435 VC.sumarray <> _four def
R30438:30440 VST.veric.shares <> Ews def
R30443:30455 VC.Verif_sumarray <> four_contents def
prf 31909:31920 <> prog_correct
R31923:31932 VST.floyd.forward <> semax_prog def
R31948:31952 VC.Verif_sumarray <> Gprog def
R31942:31946 VC.Verif_sumarray <> Vprog def
R31939:31940 Coq.Init.Datatypes <> tt constr
R31934:31937 VC.sumarray <> prog def
R31997:32009 VC.Verif_sumarray <> body_sumarray thm
